$date
	Fri Mar 14 15:33:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module brainless_top $end
$scope module brainless $end
$var wire 1 ! acc_to_db $end
$var wire 4 " accum [3:0] $end
$var wire 4 # addr_bus [3:0] $end
$var wire 4 $ alu_out [3:0] $end
$var wire 1 % arith $end
$var wire 1 & clk $end
$var wire 4 ' data_bus [3:0] $end
$var wire 4 ( data_in [3:0] $end
$var wire 1 ) invert $end
$var wire 1 * load_acc $end
$var wire 1 + pass $end
$var wire 1 , read $end
$var wire 1 - reset $end
$var wire 1 . write $end
$var wire 4 / s1 [3:0] $end
$var wire 4 0 s0 [3:0] $end
$var wire 4 1 data_bus_temp [3:0] $end
$var wire 4 2 alu_out_temp [3:0] $end
$var wire 4 3 accum_temp [3:0] $end
$scope module alu_i0 $end
$var wire 1 % arith $end
$var wire 1 4 cin $end
$var wire 1 ) invert $end
$var wire 1 + pass $end
$var wire 4 5 y [3:0] $end
$var wire 4 6 s0 [3:0] $end
$var wire 1 7 overfl $end
$var wire 1 8 cout $end
$var wire 4 9 b [3:0] $end
$var wire 4 : a [3:0] $end
$scope module and_add_i1 $end
$var wire 1 % add $end
$var wire 1 4 cin $end
$var wire 1 + pass $end
$var wire 4 ; y [3:0] $end
$var wire 4 < s2 [3:0] $end
$var wire 4 = s1 [3:0] $end
$var wire 4 > s0 [3:0] $end
$var wire 1 7 overfl $end
$var wire 1 8 cout $end
$var wire 4 ? b [3:0] $end
$var wire 4 @ a [3:0] $end
$scope module four_bit_adder_i0 $end
$var wire 1 4 cin $end
$var wire 1 8 cout $end
$var wire 1 7 overfl $end
$var wire 4 A y [3:0] $end
$var wire 1 B s9 $end
$var wire 1 C s8 $end
$var wire 1 D s7 $end
$var wire 1 E s6 $end
$var wire 1 F s5 $end
$var wire 1 G s4 $end
$var wire 1 H s3 $end
$var wire 1 I s2 $end
$var wire 1 J s14 $end
$var wire 1 K s13 $end
$var wire 1 L s12 $end
$var wire 1 M s11 $end
$var wire 1 N s10 $end
$var wire 1 O s1 $end
$var wire 1 P s0 $end
$var wire 1 Q cout_temp $end
$var wire 4 R b [3:0] $end
$var wire 4 S a [3:0] $end
$scope module full_adder_i0 $end
$var wire 1 L a $end
$var wire 1 K b $end
$var wire 1 4 cin $end
$var wire 1 N cout $end
$var wire 1 J sum $end
$upscope $end
$scope module full_adder_i1 $end
$var wire 1 C a $end
$var wire 1 B b $end
$var wire 1 N cin $end
$var wire 1 E cout $end
$var wire 1 M sum $end
$upscope $end
$scope module full_adder_i2 $end
$var wire 1 G a $end
$var wire 1 F b $end
$var wire 1 E cin $end
$var wire 1 I cout $end
$var wire 1 D sum $end
$upscope $end
$scope module full_adder_i3 $end
$var wire 1 P a $end
$var wire 1 O b $end
$var wire 1 I cin $end
$var wire 1 Q cout $end
$var wire 1 H sum $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i1 $end
$var wire 4 T a [3:0] $end
$var wire 4 U b [3:0] $end
$var wire 1 % sel $end
$var wire 4 V y [3:0] $end
$var wire 1 W s9 $end
$var wire 1 X s8 $end
$var wire 1 Y s7 $end
$var wire 1 Z s6 $end
$var wire 1 [ s5 $end
$var wire 1 \ s4 $end
$var wire 1 ] s3 $end
$var wire 1 ^ s2 $end
$var wire 1 _ s11 $end
$var wire 1 ` s10 $end
$var wire 1 a s1 $end
$var wire 1 b s0 $end
$scope module two_bit_mux_i0 $end
$var wire 1 b a $end
$var wire 1 a b $end
$var wire 1 % s $end
$var wire 1 ^ y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 ] a $end
$var wire 1 \ b $end
$var wire 1 % s $end
$var wire 1 [ y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 Z a $end
$var wire 1 Y b $end
$var wire 1 % s $end
$var wire 1 X y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 W a $end
$var wire 1 ` b $end
$var wire 1 % s $end
$var wire 1 _ y $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i2 $end
$var wire 4 c a [3:0] $end
$var wire 1 + sel $end
$var wire 4 d y [3:0] $end
$var wire 1 e s9 $end
$var wire 1 f s8 $end
$var wire 1 g s7 $end
$var wire 1 h s6 $end
$var wire 1 i s5 $end
$var wire 1 j s4 $end
$var wire 1 k s3 $end
$var wire 1 l s2 $end
$var wire 1 m s11 $end
$var wire 1 n s10 $end
$var wire 1 o s1 $end
$var wire 1 p s0 $end
$var wire 4 q b [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 p a $end
$var wire 1 o b $end
$var wire 1 + s $end
$var wire 1 l y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 k a $end
$var wire 1 j b $end
$var wire 1 + s $end
$var wire 1 i y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 h a $end
$var wire 1 g b $end
$var wire 1 + s $end
$var wire 1 f y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 e a $end
$var wire 1 n b $end
$var wire 1 + s $end
$var wire 1 m y $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_neg_i0 $end
$var wire 1 ) invert $end
$var wire 1 % neg $end
$var wire 1 r s0 $end
$var wire 4 s y [3:0] $end
$var wire 4 t s1 [3:0] $end
$var wire 1 u cry $end
$var wire 4 v a [3:0] $end
$scope module incrementer_i0 $end
$var wire 4 w a [3:0] $end
$var wire 1 r inc $end
$var wire 4 x y [3:0] $end
$var wire 1 y s9 $end
$var wire 1 z s8 $end
$var wire 1 { s7 $end
$var wire 1 | s6 $end
$var wire 1 } s5 $end
$var wire 1 ~ s4 $end
$var wire 1 !" s3 $end
$var wire 1 "" s2 $end
$var wire 1 #" s10 $end
$var wire 1 $" s1 $end
$var wire 1 %" s0 $end
$var wire 1 u cry $end
$scope module half_adder_i0 $end
$var wire 1 y a $end
$var wire 1 r b $end
$var wire 1 { cry $end
$var wire 1 #" sum $end
$upscope $end
$scope module half_adder_i1 $end
$var wire 1 | a $end
$var wire 1 { b $end
$var wire 1 ~ cry $end
$var wire 1 z sum $end
$upscope $end
$scope module half_adder_i2 $end
$var wire 1 !" a $end
$var wire 1 ~ b $end
$var wire 1 $" cry $end
$var wire 1 } sum $end
$upscope $end
$scope module half_adder_i3 $end
$var wire 1 %" a $end
$var wire 1 $" b $end
$var wire 1 u cry $end
$var wire 1 "" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i2 $end
$var wire 1 ! sel $end
$var wire 4 &" y [3:0] $end
$var wire 1 '" s9 $end
$var wire 1 (" s8 $end
$var wire 1 )" s7 $end
$var wire 1 *" s6 $end
$var wire 1 +" s5 $end
$var wire 1 ," s4 $end
$var wire 1 -" s3 $end
$var wire 1 ." s2 $end
$var wire 1 /" s11 $end
$var wire 1 0" s10 $end
$var wire 1 1" s1 $end
$var wire 1 2" s0 $end
$var wire 4 3" b [3:0] $end
$var wire 4 4" a [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 2" a $end
$var wire 1 1" b $end
$var wire 1 ! s $end
$var wire 1 ." y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 -" a $end
$var wire 1 ," b $end
$var wire 1 ! s $end
$var wire 1 +" y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 *" a $end
$var wire 1 )" b $end
$var wire 1 ! s $end
$var wire 1 (" y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 '" a $end
$var wire 1 0" b $end
$var wire 1 ! s $end
$var wire 1 /" y $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i4 $end
$var wire 4 5" a [3:0] $end
$var wire 1 , sel $end
$var wire 4 6" y [3:0] $end
$var wire 1 7" s9 $end
$var wire 1 8" s8 $end
$var wire 1 9" s7 $end
$var wire 1 :" s6 $end
$var wire 1 ;" s5 $end
$var wire 1 <" s4 $end
$var wire 1 =" s3 $end
$var wire 1 >" s2 $end
$var wire 1 ?" s11 $end
$var wire 1 @" s10 $end
$var wire 1 A" s1 $end
$var wire 1 B" s0 $end
$var wire 4 C" b [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 B" a $end
$var wire 1 A" b $end
$var wire 1 , s $end
$var wire 1 >" y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 =" a $end
$var wire 1 <" b $end
$var wire 1 , s $end
$var wire 1 ;" y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 :" a $end
$var wire 1 9" b $end
$var wire 1 , s $end
$var wire 1 8" y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 7" a $end
$var wire 1 @" b $end
$var wire 1 , s $end
$var wire 1 ?" y $end
$upscope $end
$upscope $end
$scope module four_bit_reg_i1 $end
$var wire 1 & clk $end
$var wire 4 D" d [3:0] $end
$var wire 1 * enable $end
$var wire 4 E" q [3:0] $end
$var wire 1 - reset $end
$var wire 1 F" s8 $end
$var wire 1 G" s7 $end
$var wire 1 H" s6 $end
$var wire 1 I" s5 $end
$var wire 1 J" s4 $end
$var wire 1 K" s3 $end
$var wire 1 L" s2 $end
$var wire 1 M" s1 $end
$var wire 4 N" s0 [3:0] $end
$var wire 4 O" q_temp [3:0] $end
$scope module DIG_D_FF_AS_1bit_i1 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 M" D $end
$var wire 1 I" Q $end
$var wire 1 P" Set $end
$var wire 1 Q" \~Q $end
$var parameter 32 R" Default $end
$var reg 1 S" state $end
$upscope $end
$scope module DIG_D_FF_AS_1bit_i2 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 L" D $end
$var wire 1 H" Q $end
$var wire 1 T" Set $end
$var wire 1 U" \~Q $end
$var parameter 32 V" Default $end
$var reg 1 W" state $end
$upscope $end
$scope module DIG_D_FF_AS_1bit_i3 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 K" D $end
$var wire 1 G" Q $end
$var wire 1 X" Set $end
$var wire 1 Y" \~Q $end
$var parameter 32 Z" Default $end
$var reg 1 [" state $end
$upscope $end
$scope module DIG_D_FF_AS_1bit_i4 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 J" D $end
$var wire 1 F" Q $end
$var wire 1 \" Set $end
$var wire 1 ]" \~Q $end
$var parameter 32 ^" Default $end
$var reg 1 _" state $end
$upscope $end
$scope module four_bit_mux_i0 $end
$var wire 4 `" a [3:0] $end
$var wire 4 a" b [3:0] $end
$var wire 1 * sel $end
$var wire 4 b" y [3:0] $end
$var wire 1 c" s9 $end
$var wire 1 d" s8 $end
$var wire 1 e" s7 $end
$var wire 1 f" s6 $end
$var wire 1 g" s5 $end
$var wire 1 h" s4 $end
$var wire 1 i" s3 $end
$var wire 1 j" s2 $end
$var wire 1 k" s11 $end
$var wire 1 l" s10 $end
$var wire 1 m" s1 $end
$var wire 1 n" s0 $end
$scope module two_bit_mux_i0 $end
$var wire 1 n" a $end
$var wire 1 m" b $end
$var wire 1 * s $end
$var wire 1 j" y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 i" a $end
$var wire 1 h" b $end
$var wire 1 * s $end
$var wire 1 g" y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 f" a $end
$var wire 1 e" b $end
$var wire 1 * s $end
$var wire 1 d" y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 c" a $end
$var wire 1 l" b $end
$var wire 1 * s $end
$var wire 1 k" y $end
$upscope $end
$upscope $end
$upscope $end
$scope module program_ram_i3 $end
$var wire 4 o" addr [3:0] $end
$var wire 1 & clk $end
$var wire 4 p" data_in [3:0] $end
$var wire 1 . write $end
$var wire 4 q" data_out [3:0] $end
$scope module DIG_RAMDualPort_i0 $end
$var wire 4 r" A [3:0] $end
$var wire 1 & C $end
$var wire 4 s" D [3:0] $end
$var wire 4 t" Din [3:0] $end
$var wire 1 u" ld $end
$var wire 1 . str $end
$var parameter 32 v" AddrBits $end
$var parameter 32 w" Bits $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 w"
b100 v"
b0 ^"
b0 Z"
b0 V"
b0 R"
$end
#0
$dumpvars
1u"
b0 t"
b11 s"
b0 r"
b11 q"
b0 p"
b0 o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
b0 b"
b0 a"
b0 `"
0_"
1]"
0\"
0["
1Y"
0X"
0W"
1U"
0T"
0S"
1Q"
0P"
b0 O"
b0 N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
b0 E"
b0 D"
b11 C"
0B"
0A"
1@"
0?"
0>"
0="
0<"
0;"
0:"
19"
08"
07"
b0 6"
b0 5"
b0 4"
b0 3"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
b0 &"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
b0 x
b0 w
b0 v
0u
b0 t
b0 s
0r
b0 q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
b0 d
b0 c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
07
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b11 /
0.
1-
0,
0+
0*
0)
b0 (
b0 '
0&
0%
b0 $
b0 #
b0 "
0!
$end
#5
1&
#10
1M"
1K"
1j"
b1010 N"
b1010 b"
1d"
1m"
1a
1e"
1Y
1l
1H
b1010 $
b1010 2
b1010 5
b1010 ;
b1010 d
b1010 D"
b1010 a"
1f
b1010 =
b1010 A
b1010 U
1M
1o
1P
1g
1C
1""
b1010 6
b1010 @
b1010 S
b1010 q
b1010 s
b1010 x
1z
1%"
1|
b1010 t
b1010 w
1."
b1010 '
b1010 1
b1010 :
b1010 v
b1010 &"
b1010 p"
b1010 t"
1("
12"
1*"
1>"
b1010 0
b1010 4"
b1010 6"
18"
1B"
1:"
0-
1*
1+
b1010 (
b1010 5"
0&
#15
1p
1h
1^
1\
b1010 <
b1010 V
b1010 c
1X
0a
17
0Y
1D
0H
18
1Q
1b
b100 =
b100 A
b100 U
0M
1E
1Z
b1010 >
b1010 T
0Q"
1n"
11"
1O
0Y"
1f"
1)"
1B
1I"
1S"
b1010 "
b1010 3
b1010 9
b1010 ?
b1010 R
b1010 3"
b1010 E"
b1010 O"
b1010 `"
1G"
1["
1&
#20
0\
0D
07
1p
1h
1^
b1010 <
b1010 V
b1010 c
1X
1a
1I
0Y
1`
1M"
1K"
1H
18
1Q
1b
0M
1E
1Z
b1001 =
b1001 A
b1001 U
1J
0."
b0 '
b0 1
b0 :
b0 v
b0 &"
b0 p"
b0 t"
0("
1j"
b1010 N"
b1010 b"
1d"
b1010 >
b1010 T
1o
1P
1j
1G
1g
1C
1n
1L
02"
0*"
1m"
1e"
1""
1}
1z
b1111 6
b1111 @
b1111 S
b1111 q
b1111 s
b1111 x
1#"
0>"
b0 0
b0 4"
b0 6"
08"
1l
b1010 $
b1010 2
b1010 5
b1010 ;
b1010 d
b1010 D"
b1010 a"
1f
1%"
1!"
1|
1y
b1111 t
b1111 w
0B"
0:"
0+
1)
b0 (
b0 5"
0&
#25
1&
#30
1\
1D
0M"
08
0Q
1K"
0j"
0p
1d"
1h
0^
07
b10 <
b10 V
b10 c
1X
0m"
1a
0I
1e"
0Y
1`
0L"
1J"
0l
1H
0b
1f
0M
1E
1Z
b1101 =
b1101 A
b1101 U
1J
1("
b11 '
b11 1
b11 :
b11 v
b11 &"
b11 p"
b11 t"
1/"
0g"
b11 N"
b11 b"
1k"
b10 >
b10 T
0o
0P
0j
0G
1g
1C
1n
1L
1*"
1'"
0h"
1l"
0""
0}
1z
b11 6
b11 @
b11 S
b11 q
b11 s
b11 x
1#"
18"
b11 0
b11 4"
b11 6"
1?"
0i
b11 $
b11 2
b11 5
b11 ;
b11 d
b11 D"
b11 a"
1m
0%"
0!"
1|
1y
b11 t
b11 w
1:"
17"
1+
0)
b11 (
b11 5"
0&
#35
1e
1Y
b11 <
b11 V
b11 c
1_
0a
0`
1M
0H
b110 =
b110 A
b110 U
0J
1N
1W
b11 >
b11 T
1Q"
0n"
01"
0O
0]"
1c"
10"
1K
0I"
0S"
b11 "
b11 3
b11 9
b11 ?
b11 R
b11 3"
b11 E"
b11 O"
b11 `"
1F"
1_"
1&
#40
1a
0h
1H
17
b1 <
b1 V
b1 c
0X
0\
1I
0Y
0D
b1000 =
b1000 A
b1000 U
0M
0Z
b1 >
b1 T
1j
1G
0g
0C
1}
b101 6
b101 @
b101 S
b101 q
b101 s
b101 x
0z
1!"
0|
b101 t
b101 w
0K"
1J"
1+"
b101 '
b101 1
b101 :
b101 v
b101 &"
b101 p"
b101 t"
0("
0d"
b1 N"
b1 b"
1k"
1-"
0*"
0e"
1l"
1;"
b101 0
b101 4"
b101 6"
08"
0f
b1 $
b1 2
b1 5
b1 ;
b1 d
b1 D"
b1 a"
1m
1="
0:"
0+
b101 (
b101 5"
0&
#45
0a
0H
07
0I
1\
1D
1Y
0E
b110 =
b110 A
b110 U
1M
1Y"
0f"
0)"
0B
b1 "
b1 3
b1 9
b1 ?
b1 R
b1 3"
b1 E"
b1 O"
b1 `"
0G"
0["
1&
#50
0l"
b0 $
b0 2
b0 5
b0 ;
b0 d
b0 D"
b0 a"
0m
0e
0Y
b0 <
b0 V
b0 c
0_
0\
1`
0M
0D
b1 =
b1 A
b1 U
1J
0N
0W
b0 >
b0 T
0j
0G
0n
0L
0}
b0 6
b0 @
b0 S
b0 q
b0 s
b0 x
0#"
0!"
0y
b0 t
b0 w
0+"
b0 '
b0 1
b0 :
b0 v
b0 &"
b0 p"
b0 t"
0/"
0-"
0'"
1J"
0;"
b0 0
b0 4"
b0 6"
0?"
b1 N"
b1 b"
1k"
0="
07"
0*
b0 (
b0 5"
0&
#55
1&
#60
0&
#65
1&
#70
0&
#75
1&
#80
0J"
0`
b0 N"
b0 b"
0k"
b0 =
b0 A
b0 U
0J
1]"
0c"
00"
0K
b0 "
b0 3
b0 9
b0 ?
b0 R
b0 3"
b0 E"
b0 O"
b0 `"
0F"
0_"
1-
0&
